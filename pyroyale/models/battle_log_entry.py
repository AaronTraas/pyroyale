# coding: utf-8

"""
    Clash Royale API

    Unofficial Swagger definition for the official Clash Royale API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BattleLogEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'battle_time': 'str',
        'is_ladder_tournament': 'bool',
        'arena': 'Arena',
        'game_mode': 'GameMode',
        'deck_selection': 'str',
        'team': 'list[BattleLogTeam]',
        'opponent': 'list[BattleLogTeam]'
    }

    attribute_map = {
        'type': 'type',
        'battle_time': 'battleTime',
        'is_ladder_tournament': 'isLadderTournament',
        'arena': 'arena',
        'game_mode': 'gameMode',
        'deck_selection': 'deckSelection',
        'team': 'team',
        'opponent': 'opponent'
    }

    def __init__(self, type=None, battle_time=None, is_ladder_tournament=None, arena=None, game_mode=None, deck_selection=None, team=None, opponent=None):  # noqa: E501
        """BattleLogEntry - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._battle_time = None
        self._is_ladder_tournament = None
        self._arena = None
        self._game_mode = None
        self._deck_selection = None
        self._team = None
        self._opponent = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if battle_time is not None:
            self.battle_time = battle_time
        if is_ladder_tournament is not None:
            self.is_ladder_tournament = is_ladder_tournament
        if arena is not None:
            self.arena = arena
        if game_mode is not None:
            self.game_mode = game_mode
        if deck_selection is not None:
            self.deck_selection = deck_selection
        if team is not None:
            self.team = team
        if opponent is not None:
            self.opponent = opponent

    @property
    def type(self):
        """Gets the type of this BattleLogEntry.  # noqa: E501


        :return: The type of this BattleLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BattleLogEntry.


        :param type: The type of this BattleLogEntry.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def battle_time(self):
        """Gets the battle_time of this BattleLogEntry.  # noqa: E501


        :return: The battle_time of this BattleLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._battle_time

    @battle_time.setter
    def battle_time(self, battle_time):
        """Sets the battle_time of this BattleLogEntry.


        :param battle_time: The battle_time of this BattleLogEntry.  # noqa: E501
        :type: str
        """

        self._battle_time = battle_time

    @property
    def is_ladder_tournament(self):
        """Gets the is_ladder_tournament of this BattleLogEntry.  # noqa: E501


        :return: The is_ladder_tournament of this BattleLogEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_ladder_tournament

    @is_ladder_tournament.setter
    def is_ladder_tournament(self, is_ladder_tournament):
        """Sets the is_ladder_tournament of this BattleLogEntry.


        :param is_ladder_tournament: The is_ladder_tournament of this BattleLogEntry.  # noqa: E501
        :type: bool
        """

        self._is_ladder_tournament = is_ladder_tournament

    @property
    def arena(self):
        """Gets the arena of this BattleLogEntry.  # noqa: E501


        :return: The arena of this BattleLogEntry.  # noqa: E501
        :rtype: Arena
        """
        return self._arena

    @arena.setter
    def arena(self, arena):
        """Sets the arena of this BattleLogEntry.


        :param arena: The arena of this BattleLogEntry.  # noqa: E501
        :type: Arena
        """

        self._arena = arena

    @property
    def game_mode(self):
        """Gets the game_mode of this BattleLogEntry.  # noqa: E501


        :return: The game_mode of this BattleLogEntry.  # noqa: E501
        :rtype: GameMode
        """
        return self._game_mode

    @game_mode.setter
    def game_mode(self, game_mode):
        """Sets the game_mode of this BattleLogEntry.


        :param game_mode: The game_mode of this BattleLogEntry.  # noqa: E501
        :type: GameMode
        """

        self._game_mode = game_mode

    @property
    def deck_selection(self):
        """Gets the deck_selection of this BattleLogEntry.  # noqa: E501


        :return: The deck_selection of this BattleLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._deck_selection

    @deck_selection.setter
    def deck_selection(self, deck_selection):
        """Sets the deck_selection of this BattleLogEntry.


        :param deck_selection: The deck_selection of this BattleLogEntry.  # noqa: E501
        :type: str
        """

        self._deck_selection = deck_selection

    @property
    def team(self):
        """Gets the team of this BattleLogEntry.  # noqa: E501


        :return: The team of this BattleLogEntry.  # noqa: E501
        :rtype: list[BattleLogTeam]
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this BattleLogEntry.


        :param team: The team of this BattleLogEntry.  # noqa: E501
        :type: list[BattleLogTeam]
        """

        self._team = team

    @property
    def opponent(self):
        """Gets the opponent of this BattleLogEntry.  # noqa: E501


        :return: The opponent of this BattleLogEntry.  # noqa: E501
        :rtype: list[BattleLogTeam]
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this BattleLogEntry.


        :param opponent: The opponent of this BattleLogEntry.  # noqa: E501
        :type: list[BattleLogTeam]
        """

        self._opponent = opponent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BattleLogEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
