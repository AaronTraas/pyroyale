# coding: utf-8

"""
    Clash Royale API

    Unofficial Swagger definition for the official Clash Royale API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class WarClan(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tag': 'str',
        'name': 'str',
        'badge_id': 'int',
        'clan_score': 'int',
        'participants': 'int',
        'crowns': 'int',
        'battles_remaining': 'int',
        'battles_played': 'int',
        'wins': 'int'
    }

    attribute_map = {
        'tag': 'tag',
        'name': 'name',
        'badge_id': 'badgeId',
        'clan_score': 'clanScore',
        'participants': 'participants',
        'crowns': 'crowns',
        'battles_remaining': 'battlesRemaining',
        'battles_played': 'battlesPlayed',
        'wins': 'wins'
    }

    def __init__(self, tag=None, name=None, badge_id=None, clan_score=None, participants=None, crowns=None, battles_remaining=None, battles_played=None, wins=None):  # noqa: E501
        """WarClan - a model defined in OpenAPI"""  # noqa: E501

        self._tag = None
        self._name = None
        self._badge_id = None
        self._clan_score = None
        self._participants = None
        self._crowns = None
        self._battles_remaining = None
        self._battles_played = None
        self._wins = None
        self.discriminator = None

        if tag is not None:
            self.tag = tag
        if name is not None:
            self.name = name
        if badge_id is not None:
            self.badge_id = badge_id
        if clan_score is not None:
            self.clan_score = clan_score
        if participants is not None:
            self.participants = participants
        if crowns is not None:
            self.crowns = crowns
        if battles_remaining is not None:
            self.battles_remaining = battles_remaining
        if battles_played is not None:
            self.battles_played = battles_played
        if wins is not None:
            self.wins = wins

    @property
    def tag(self):
        """Gets the tag of this WarClan.  # noqa: E501


        :return: The tag of this WarClan.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this WarClan.


        :param tag: The tag of this WarClan.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def name(self):
        """Gets the name of this WarClan.  # noqa: E501


        :return: The name of this WarClan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WarClan.


        :param name: The name of this WarClan.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def badge_id(self):
        """Gets the badge_id of this WarClan.  # noqa: E501


        :return: The badge_id of this WarClan.  # noqa: E501
        :rtype: int
        """
        return self._badge_id

    @badge_id.setter
    def badge_id(self, badge_id):
        """Sets the badge_id of this WarClan.


        :param badge_id: The badge_id of this WarClan.  # noqa: E501
        :type: int
        """

        self._badge_id = badge_id

    @property
    def clan_score(self):
        """Gets the clan_score of this WarClan.  # noqa: E501


        :return: The clan_score of this WarClan.  # noqa: E501
        :rtype: int
        """
        return self._clan_score

    @clan_score.setter
    def clan_score(self, clan_score):
        """Sets the clan_score of this WarClan.


        :param clan_score: The clan_score of this WarClan.  # noqa: E501
        :type: int
        """

        self._clan_score = clan_score

    @property
    def participants(self):
        """Gets the participants of this WarClan.  # noqa: E501


        :return: The participants of this WarClan.  # noqa: E501
        :rtype: int
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this WarClan.


        :param participants: The participants of this WarClan.  # noqa: E501
        :type: int
        """

        self._participants = participants

    @property
    def crowns(self):
        """Gets the crowns of this WarClan.  # noqa: E501


        :return: The crowns of this WarClan.  # noqa: E501
        :rtype: int
        """
        return self._crowns

    @crowns.setter
    def crowns(self, crowns):
        """Sets the crowns of this WarClan.


        :param crowns: The crowns of this WarClan.  # noqa: E501
        :type: int
        """

        self._crowns = crowns

    @property
    def battles_remaining(self):
        """Gets the battles_remaining of this WarClan.  # noqa: E501


        :return: The battles_remaining of this WarClan.  # noqa: E501
        :rtype: int
        """
        return self._battles_remaining

    @battles_remaining.setter
    def battles_remaining(self, battles_remaining):
        """Sets the battles_remaining of this WarClan.


        :param battles_remaining: The battles_remaining of this WarClan.  # noqa: E501
        :type: int
        """

        self._battles_remaining = battles_remaining

    @property
    def battles_played(self):
        """Gets the battles_played of this WarClan.  # noqa: E501


        :return: The battles_played of this WarClan.  # noqa: E501
        :rtype: int
        """
        return self._battles_played

    @battles_played.setter
    def battles_played(self, battles_played):
        """Sets the battles_played of this WarClan.


        :param battles_played: The battles_played of this WarClan.  # noqa: E501
        :type: int
        """

        self._battles_played = battles_played

    @property
    def wins(self):
        """Gets the wins of this WarClan.  # noqa: E501


        :return: The wins of this WarClan.  # noqa: E501
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this WarClan.


        :param wins: The wins of this WarClan.  # noqa: E501
        :type: int
        """

        self._wins = wins

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WarClan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
