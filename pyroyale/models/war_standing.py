# coding: utf-8

"""
    Clash Royale API

    Unofficial Swagger definition for the official Clash Royale API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class WarStanding(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'clan': 'WarStandingClan',
        'trophy_change': 'int'
    }

    attribute_map = {
        'clan': 'clan',
        'trophy_change': 'trophyChange'
    }

    def __init__(self, clan=None, trophy_change=None):  # noqa: E501
        """WarStanding - a model defined in OpenAPI"""  # noqa: E501

        self._clan = None
        self._trophy_change = None
        self.discriminator = None

        if clan is not None:
            self.clan = clan
        if trophy_change is not None:
            self.trophy_change = trophy_change

    @property
    def clan(self):
        """Gets the clan of this WarStanding.  # noqa: E501


        :return: The clan of this WarStanding.  # noqa: E501
        :rtype: WarStandingClan
        """
        return self._clan

    @clan.setter
    def clan(self, clan):
        """Sets the clan of this WarStanding.


        :param clan: The clan of this WarStanding.  # noqa: E501
        :type: WarStandingClan
        """

        self._clan = clan

    @property
    def trophy_change(self):
        """Gets the trophy_change of this WarStanding.  # noqa: E501


        :return: The trophy_change of this WarStanding.  # noqa: E501
        :rtype: int
        """
        return self._trophy_change

    @trophy_change.setter
    def trophy_change(self, trophy_change):
        """Sets the trophy_change of this WarStanding.


        :param trophy_change: The trophy_change of this WarStanding.  # noqa: E501
        :type: int
        """

        self._trophy_change = trophy_change

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WarStanding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
