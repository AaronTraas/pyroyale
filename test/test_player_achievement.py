# coding: utf-8

"""
    Clash Royale API

    Unofficial Swagger definition for the official Clash Royale API  # noqa: E501

    OpenAPI spec version: 1.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import io
import sys
import unittest

import pyroyale
from pyroyale.models.player_achievement import PlayerAchievement  # noqa: E501
from pyroyale.rest import ApiException


class TestPlayerAchievement(unittest.TestCase):
    """PlayerAchievement unit test stubs"""

    def testDefaults(self):
        model = PlayerAchievement()

    def testConstructorInitializers(self):
        model = PlayerAchievement(
            name='name',
            stars='stars',
            value='value',
            target='target',
            info='info'
        )

        assert model.name=='name'
        assert model.stars=='stars'
        assert model.value=='value'
        assert model.target=='target'
        assert model.info=='info'

    def testToDict(self):
        model = PlayerAchievement(
            name={'foo':'bar'},
            stars=PlayerAchievement(name=123),
            value=[PlayerAchievement(name='clanname')]
        )

        modelDict = model.to_dict()

        assert modelDict['name']['foo']=='bar'
        assert modelDict['stars']['name']==123
        assert modelDict['value'][0]['name']=='clanname'

    def testToString(self):
        model = PlayerAchievement('TestStringSequence')

        modelString = model.to_str()
        assert len(modelString) > 1
        assert 'TestStringSequence' in modelString

    def testPrint(self):
        model = PlayerAchievement('TestStringSequence')

        capturedOutput = io.StringIO()
        sys.stdout = capturedOutput
        print(model)
        sys.stdout = sys.__stdout__

        testString = capturedOutput.getvalue()

        assert len(testString) > 1
        assert 'TestStringSequence' in testString


    def testEqual(self):
        model_a  = PlayerAchievement('A')
        model_a2 = PlayerAchievement('A')
        model_b  = PlayerAchievement('B')

        assert model_a == model_a
        assert model_a == model_a2
        assert model_a != model_b
        assert model_a != 'not a'


if __name__ == '__main__':
    unittest.main()
