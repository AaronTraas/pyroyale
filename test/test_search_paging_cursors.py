# coding: utf-8

"""
    Clash Royale API

    Unofficial Swagger definition for the official Clash Royale API  # noqa: E501

    OpenAPI spec version: 1.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import io
import sys
import unittest

import pyroyale
from pyroyale.models.search_paging_cursors import SearchPagingCursors  # noqa: E501
from pyroyale.rest import ApiException


class TestSearchPagingCursors(unittest.TestCase):
    """SearchPagingCursors unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testSearchPagingCursors(self):
        """Test SearchPagingCursors"""
        # FIXME: construct object with mandatory attributes with example values
        # model = SearchPagingCursors()  # noqa: E501
        pass

    def testDefaults(self):
        model = SearchPagingCursors()
        pass

    def testConstructorInitializers(self):
        model = SearchPagingCursors(
            before='before',
            after='after'
        )

        assert model.before=='before'
        assert model.after=='after'

    def testToDict(self):
        model = SearchPagingCursors(
            before=123,
            after=SearchPagingCursors(after='after')
        )

        modelDict = model.to_dict()

        assert modelDict['before']==123
        assert modelDict['after']['after']=='after'

        model = SearchPagingCursors(
            before={'foo':'bar'},
            after=[SearchPagingCursors(before='before')]
        )

        modelDict = model.to_dict()

        assert modelDict['before']['foo']=='bar'
        assert modelDict['after'][0]['before']=='before'

    def testToString(self):
        model = SearchPagingCursors('TestStringSequence')

        modelString = model.to_str()
        assert len(modelString) > 1
        assert 'TestStringSequence' in modelString

    def testPrint(self):
        model = SearchPagingCursors('TestStringSequence')

        capturedOutput = io.StringIO()
        sys.stdout = capturedOutput
        print(model)
        sys.stdout = sys.__stdout__

        testString = capturedOutput.getvalue()

        assert len(testString) > 1
        assert 'TestStringSequence' in testString


    def testEqual(self):
        model_a  = SearchPagingCursors('A')
        model_a2 = SearchPagingCursors('A')
        model_b  = SearchPagingCursors('B')

        assert model_a == model_a
        assert model_a == model_a2
        assert model_a != model_b
        assert model_a != 'not a'

if __name__ == '__main__':
    unittest.main()
